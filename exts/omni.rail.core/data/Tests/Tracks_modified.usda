#usda 1.0
(
    customLayerData = {
        dictionary audioSettings = {
            double dopplerLimit = 2
            double dopplerScale = 1
            string enableDistanceDelay = "off"
            string enableDoppler = "off"
            string enableInterauralDelay = "off"
            double nonSpatialTimeScale = 1
            double spatialTimeScale = 1
            double speedOfSound = 340
        }
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (50750.000000000015, -1.1268763699945339e-11, 0)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (261.96562519731384, -319.82034947660406, 48.51285674187238)
                double3 target = (239.79034326987465, -355.6013481796524, 39.00139705681159)
            }
            dictionary Right = {
                double3 position = (0, -50750, -1.1268763699945339e-11)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (230.37073331384548, -351.84734280875347, 50051.12173362136)
                double radius = 9.313587188720703
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./Tracks_modified.usda"
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            int "rtx:externalFrameCounter" = 96406
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_position" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_reflectivity" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_rotation_axis" = (3.4028235e38, 3.4028235e38, 3.4028235e38)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Z"
)

def Xform "World"
{
    def Scope "Vehicles"
    {
        def SphereLight "SphereLight"
        {
            float intensity = 30000
            float radius = 150
            double3 xformOp:translate = (650, 0, 1150)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def PhysicsScene "physicsScene"
        {
            vector3f physics:gravityDirection = (0, 0, -1)
            float physics:gravityMagnitude = 9.81
        }

        def Mesh "groundPlane" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCookedDataAPI:triangleMesh"]
        )
        {
            uniform bool doubleSided = 0
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
            uchar[] physxCookedData:triangleMesh:buffer = [7, 199, 196, 226, 132, 250, 121, 242, 67, 76, 218, 222, 197, 146, 114, 24, 228, 78, 88, 83, 1, 77, 69, 83, 72, 16, 0, 0, 0, 1, 0, 0, 0, 182, 1, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 128, 59, 196, 0, 128, 59, 196, 0, 0, 0, 0, 0, 128, 59, 68, 0, 128, 59, 196, 0, 0, 0, 0, 0, 128, 59, 68, 0, 128, 59, 68, 0, 0, 0, 0, 0, 128, 59, 196, 0, 128, 59, 68, 0, 0, 0, 0, 0, 1, 2, 0, 2, 3, 1, 0, 0, 0, 0, 1, 255, 255, 255, 255, 255, 255, 255, 255, 1, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 66, 86, 52, 32, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 149, 132, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 59, 57, 0, 128, 59, 196, 0, 128, 59, 196, 0, 0, 0, 0, 0, 128, 59, 68, 0, 128, 59, 68, 0, 0, 0, 0, 2, 0, 0, 0, 24, 48, 0, 1, 2, 0, 2, 3, 255, 255, 255, 255, 255, 255, 255, 255, 1, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 128, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 66, 86, 51, 50, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 149, 132, 68, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 0, 128, 59, 196, 0, 128, 59, 196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 59, 68, 0, 128, 59, 68, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0]
            point3f[] points = [(-750, -750, 0), (750, -750, 0), (750, 750, 0), (-750, 750, 0)]
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "varying"
            )
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsTracktionForceCharacteristic "Characteristic"
        {
            float2[] physics:speedSteps = [(0, 1), (10, 0.33), (20, 0.25), (40, 0)]
        }

        def Scope "TrackSystem"
        {
            def TSTrack "TSTrack_04"
            {
                custom rel curve
                prepend rel curve = </World/Vehicles/TrackSystem/TSTrack_04/BasisCurves_04>
                custom bool enabled = 1
                custom rel endConnection
                custom token endConnectionEndType
                custom rel frontConnection
                custom token frontConnectionEndType

                def BasisCurves "BasisCurves_04"
                {
                    uniform token basis = "bezier"
                    int[] curveVertexCounts = [7]
                    float3[] extent = [(-94.601944, -357.49725, 0), (522.1151, -350.8503, 0)]
                    point3f[] points = [(522.1151, -352.8444, 0), (460.3105, -357.49725, 0), (328.0619, -354.83847, 0), (235.68726, -352.8444, 0), (143.31262, -350.8503, 0), (-40.10753, -351.51495, 0), (-94.601944, -355.50314, 0)]
                    uniform token purpose = "default"
                    custom bool scene_visualization:drawWireframe = 1
                    uniform token type = "cubic"
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 33.20000049471855)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }
        }

        def Xform "Xform"
        {
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.01, 0.01, 0.01)
            double3 xformOp:translate = (235.1707333138566, -352.7877466012056, 33.39282468691825)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Cube "Locomotive" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI"]
            )
            {
                float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                color3f[] primvars:displayColor = [(0.2784314, 0.4117647, 0.3)]
                double size = 100
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (10, 1.5, 1)
                double3 xformOp:translate = (-480, -10, 170)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "Bogie0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI"]
            )
            {
                float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                vector3f physics:angularVelocity = (0, 0, 0)
                color3f[] primvars:displayColor = [(0.2784314, 0.4117647, 1)]
                double size = 100
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (2, 1, 1)
                double3 xformOp:translate = (-880, -10, 50)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def PhysicsSphericalJoint "Hinge"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </World/Vehicles/Xform/Locomotive>
                    rel physics:body1 = </World/Vehicles/Xform/Bogie0>
                    float physics:breakForce = inf
                    float physics:breakTorque = inf
                    float physics:coneAngle0Limit = 0.1
                    float physics:coneAngle1Limit = 30
                    point3f physics:localPos0 = (-40, -9.934107e-8, -120)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (1, 0, 0, 0)
                    quatf physics:localRot1 = (1, 0, 0, 0)
                }

                def PhysicsTrackJoint "trackJoint"
                {
                    rel physics:body0 = </World/Vehicles/Xform/Bogie0>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (0, 0, -75)
                    point3f physics:localPos1 = (0, 0, 0)
                    string physics:normalTorqueLimit = "1000kNm"
                    string physics:thresholdPosition = "35cm"
                    float physics:thresholdTangent = 30
                    string physics:torqueLimit = "500kNm"
                    rel physics:trackSystem = </World/Vehicles/TrackSystem>
                }
            }

            def Cube "Bogie1" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI"]
            )
            {
                float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                color3f[] primvars:displayColor = [(0.2784314, 0.4117647, 0.3)]
                double size = 100
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (2, 1, 1)
                double3 xformOp:translate = (-80, -10, 50)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def PhysicsSphericalJoint "Hinge"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </World/Vehicles/Xform/Locomotive>
                    rel physics:body1 = </World/Vehicles/Xform/Bogie1>
                    float physics:breakForce = inf
                    float physics:breakTorque = inf
                    float physics:coneAngle0Limit = 0.1
                    float physics:coneAngle1Limit = 30
                    point3f physics:localPos0 = (40, -9.934107e-8, -120)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (1, 0, 0, 0)
                    quatf physics:localRot1 = (1, 0, 0, 0)
                }

                def PhysicsWheelFrame "wheelFrame"
                {
                    float physics:brake = 0
                    string physics:targetVelocity = "0m/s"
                    float physics:thrust = 0
                    rel physics:tracktionForceCharacteristic = </World/Vehicles/Characteristic>

                    def PhysicsTrackJoint "trackJoint"
                    {
                        rel physics:body0 = </World/Vehicles/Xform/Bogie1>
                        bool physics:collisionEnabled = 0
                        point3f physics:localPos0 = (1, 0, -75)
                        point3f physics:localPos1 = (0, 0, 0)
                        string physics:normalTorqueLimit = "1000kNm"
                        string physics:thresholdPosition = "30cm"
                        float physics:thresholdTangent = 30
                        string physics:torqueLimit = "500kNm"
                        rel physics:trackSystem = </World/Vehicles/TrackSystem>
                    }

                    def PhysicsWheelset "axle0"
                    {
                        string physics:frictionTorque = "10Nm"
                        string physics:maxBrakingTorque = "20kNm"
                        string physics:maxMotorTorque = "100kNm"
                        string physics:radius = "1m"
                    }

                    def PhysicsWheelset "axle1"
                    {
                        string physics:frictionTorque = "10Nm"
                        string physics:maxBrakingTorque = "20kNm"
                        string physics:maxMotorTorque = "100kNm"
                        string physics:radius = "1m"
                    }
                }
            }
        }
    }

    def DomeLight "DomeLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float inputs:intensity = 1000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        token inputs:texture:format = "latlong"
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }
}

